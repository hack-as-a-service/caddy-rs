{"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/encode.Encode", "struct_fields": [{"key": "encodings", "value": {"type": "module_map", "type_name": "github.com/caddyserver/caddy/v2.ModuleMap", "doc": "Selection of compression algorithms to choose from. The best one\nwill be chosen based on the client's Accept-Encoding header.\n\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.", "module_namespace": "http.encoders"}, "doc": "Selection of compression algorithms to choose from. The best one\nwill be chosen based on the client's Accept-Encoding header.\n\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage."}, {"key": "prefer", "value": {"type": "array", "elems": {"type": "string", "doc": "If the client has no strong preference, choose these encodings in order."}}, "doc": "If the client has no strong preference, choose these encodings in order."}, {"key": "minimum_length", "value": {"type": "int", "doc": "Only encode responses that are at least this many bytes long."}, "doc": "Only encode responses that are at least this many bytes long."}, {"key": "match", "value": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp.ResponseMatcher", "struct_fields": [{"key": "status_code", "value": {"type": "array", "elems": {"type": "int", "doc": "If set, one of these status codes would be required.\nA one-digit status can be used to represent all codes\nin that class (e.g. 3 for all 3xx codes)."}}, "doc": "If set, one of these status codes would be required.\nA one-digit status can be used to represent all codes\nin that class (e.g. 3 for all 3xx codes)."}, {"key": "headers", "value": {"type": "map", "type_name": "net/http.Header", "map_keys": {"type": "string"}, "elems": {"type": "array", "elems": {"type": "string"}, "doc": "If set, each header specified must be one of the\nspecified values, with the same logic used by the\nrequest header matcher."}, "doc": "A Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n"}, "doc": "If set, each header specified must be one of the\nspecified values, with the same logic used by the\nrequest header matcher."}], "doc": "Only encode responses that match against this ResponseMmatcher.\nThe default is a collection of text-based Content-Type headers.\n\n\nResponseMatcher is a type which can determine if an\nHTTP response matches some criteria."}, "doc": "Only encode responses that match against this ResponseMmatcher.\nThe default is a collection of text-based Content-Type headers.\n\n\nResponseMatcher is a type which can determine if an\nHTTP response matches some criteria."}], "doc": "Encode is a middleware which can encode responses.\n", "module_inline_key": "handler"}