{"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver.FileServer", "struct_fields": [{"key": "root", "value": {"type": "string", "doc": "The path to the root of the site. Default is `{http.vars.root}` if set,\nor current working directory otherwise."}, "doc": "The path to the root of the site. Default is `{http.vars.root}` if set,\nor current working directory otherwise."}, {"key": "hide", "value": {"type": "array", "elems": {"type": "string", "doc": "A list of files or folders to hide; the file server will pretend as if\nthey don't exist. Accepts globular patterns like \"*.ext\" or \"/foo/*/bar\"\nas well as placeholders. Because site roots can be dynamic, this list\nuses file system paths, not request paths. To clarify, the base of\nrelative paths is the current working directory, NOT the site root.\n\nEntries without a path separator (`/` or `\\` depending on OS) will match\nany file or directory of that name regardless of its path. To hide only a\nspecific file with a name that may not be unique, always use a path\nseparator. For example, to hide all files or folder trees named \"hidden\",\nput \"hidden\" in the list. To hide only ./hidden, put \"./hidden\" in the list.\n\nWhen possible, all paths are resolved to their absolute form before\ncomparisons are made. For maximum clarity and explictness, use complete,\nabsolute paths; or, for greater portability, use relative paths instead."}}, "doc": "A list of files or folders to hide; the file server will pretend as if\nthey don't exist. Accepts globular patterns like \"*.ext\" or \"/foo/*/bar\"\nas well as placeholders. Because site roots can be dynamic, this list\nuses file system paths, not request paths. To clarify, the base of\nrelative paths is the current working directory, NOT the site root.\n\nEntries without a path separator (`/` or `\\` depending on OS) will match\nany file or directory of that name regardless of its path. To hide only a\nspecific file with a name that may not be unique, always use a path\nseparator. For example, to hide all files or folder trees named \"hidden\",\nput \"hidden\" in the list. To hide only ./hidden, put \"./hidden\" in the list.\n\nWhen possible, all paths are resolved to their absolute form before\ncomparisons are made. For maximum clarity and explictness, use complete,\nabsolute paths; or, for greater portability, use relative paths instead."}, {"key": "index_names", "value": {"type": "array", "elems": {"type": "string", "doc": "The names of files to try as index files if a folder is requested."}}, "doc": "The names of files to try as index files if a folder is requested."}, {"key": "browse", "value": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver.Browse", "struct_fields": [{"key": "template_file", "value": {"type": "string", "doc": "Use this template file instead of the default browse template."}, "doc": "Use this template file instead of the default browse template."}], "doc": "Enables file listings if a directory was requested and no index\nfile is present.\n\n\nBrowse configures directory browsing."}, "doc": "Enables file listings if a directory was requested and no index\nfile is present.\n\n\nBrowse configures directory browsing."}, {"key": "canonical_uris", "value": {"type": "bool", "doc": "Use redirects to enforce trailing slashes for directories, or to\nremove trailing slash from URIs for files. Default is true.\n\nCanonicalization will not happen if the last element of the request's\npath (the filename) is changed in an internal rewrite, to avoid\nclobbering the explicit rewrite with implicit behavior."}, "doc": "Use redirects to enforce trailing slashes for directories, or to\nremove trailing slash from URIs for files. Default is true.\n\nCanonicalization will not happen if the last element of the request's\npath (the filename) is changed in an internal rewrite, to avoid\nclobbering the explicit rewrite with implicit behavior."}, {"key": "status_code", "value": {"type": "string", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp.WeakString", "doc": "Override the status code written when successfully serving a file.\nParticularly useful when explicitly serving a file as display for\nan error, like a 404 page. A placeholder may be used. By default,\nthe status code will typically be 200, or 206 for partial content.\n\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned."}, "doc": "Override the status code written when successfully serving a file.\nParticularly useful when explicitly serving a file as display for\nan error, like a 404 page. A placeholder may be used. By default,\nthe status code will typically be 200, or 206 for partial content.\n\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned."}, {"key": "pass_thru", "value": {"type": "bool", "doc": "If pass-thru mode is enabled and a requested file is not found,\nit will invoke the next handler in the chain instead of returning\na 404 error. By default, this is false (disabled)."}, "doc": "If pass-thru mode is enabled and a requested file is not found,\nit will invoke the next handler in the chain instead of returning\na 404 error. By default, this is false (disabled)."}, {"key": "precompressed", "value": {"type": "module_map", "type_name": "github.com/caddyserver/caddy/v2.ModuleMap", "doc": "Selection of encoders to use to check for precompressed files.\n\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.", "module_namespace": "http.precompressed"}, "doc": "Selection of encoders to use to check for precompressed files.\n\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage."}, {"key": "precompressed_order", "value": {"type": "array", "elems": {"type": "string", "doc": "If the client has no strong preference (q-factor), choose these encodings in order.\nIf no order specified here, the first encoding from the Accept-Encoding header\nthat both client and server support is used"}}, "doc": "If the client has no strong preference (q-factor), choose these encodings in order.\nIf no order specified here, the first encoding from the Accept-Encoding header\nthat both client and server support is used"}], "doc": "FileServer implements a static file server responder for Caddy.\n", "module_inline_key": "handler"}