{"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite.Rewrite", "struct_fields": [{"key": "method", "value": {"type": "string", "doc": "Changes the request's HTTP verb."}, "doc": "Changes the request's HTTP verb."}, {"key": "uri", "value": {"type": "string", "doc": "Changes the request's URI, which consists of path and query string.\nOnly components of the URI that are specified will be changed.\nFor example, a value of \"/foo.html\" or \"foo.html\" will only change\nthe path and will preserve any existing query string. Similarly, a\nvalue of \"?a=b\" will only change the query string and will not affect\nthe path. Both can also be changed: \"/foo?a=b\" - this sets both the\npath and query string at the same time.\n\nYou can also use placeholders. For example, to preserve the existing\nquery string, you might use: \"?{http.request.uri.query}&a=b\". Any\nkey-value pairs you add to the query string will not overwrite\nexisting values (individual pairs are append-only).\n\nTo clear the query string, explicitly set an empty one: \"?\""}, "doc": "Changes the request's URI, which consists of path and query string.\nOnly components of the URI that are specified will be changed.\nFor example, a value of \"/foo.html\" or \"foo.html\" will only change\nthe path and will preserve any existing query string. Similarly, a\nvalue of \"?a=b\" will only change the query string and will not affect\nthe path. Both can also be changed: \"/foo?a=b\" - this sets both the\npath and query string at the same time.\n\nYou can also use placeholders. For example, to preserve the existing\nquery string, you might use: \"?{http.request.uri.query}&a=b\". Any\nkey-value pairs you add to the query string will not overwrite\nexisting values (individual pairs are append-only).\n\nTo clear the query string, explicitly set an empty one: \"?\""}, {"key": "strip_path_prefix", "value": {"type": "string", "doc": "Strips the given prefix from the beginning of the URI path."}, "doc": "Strips the given prefix from the beginning of the URI path."}, {"key": "strip_path_suffix", "value": {"type": "string", "doc": "Strips the given suffix from the end of the URI path."}, "doc": "Strips the given suffix from the end of the URI path."}, {"key": "uri_substring", "value": {"type": "array", "elems": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite.substrReplacer", "struct_fields": [{"key": "find", "value": {"type": "string", "doc": "A substring to find. Supports placeholders."}, "doc": "A substring to find. Supports placeholders."}, {"key": "replace", "value": {"type": "string", "doc": "The substring to replace with. Supports placeholders."}, "doc": "The substring to replace with. Supports placeholders."}, {"key": "limit", "value": {"type": "int", "doc": "Maximum number of replacements per string.\nSet to <= 0 for no limit (default)."}, "doc": "Maximum number of replacements per string.\nSet to <= 0 for no limit (default)."}], "doc": "Performs substring replacements on the URI.\n\n\nsubstrReplacer describes either a simple and fast substring replacement."}}, "doc": "Performs substring replacements on the URI.\n\n\nsubstrReplacer describes either a simple and fast substring replacement."}, {"key": "path_regexp", "value": {"type": "array", "elems": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite.regexReplacer", "struct_fields": [{"key": "find", "value": {"type": "string", "doc": "The regular expression to find."}, "doc": "The regular expression to find."}, {"key": "replace", "value": {"type": "string", "doc": "The substring to replace with. Supports placeholders and\nregular expression capture groups."}, "doc": "The substring to replace with. Supports placeholders and\nregular expression capture groups."}], "doc": "Performs regular expression replacements on the URI path.\n\n\nregexReplacer describes a replacement using a regular expression."}}, "doc": "Performs regular expression replacements on the URI path.\n\n\nregexReplacer describes a replacement using a regular expression."}], "doc": "Rewrite is a middleware which can rewrite HTTP requests.\n\nThe Method and URI properties are \"setters\": the request URI\nwill be set to the given values. Other properties are \"modifiers\":\nthey modify existing files but do not explicitly specify what the\nresult will be. It is atypical to combine the use of setters and\nmodifiers in a single rewrite.\n", "module_inline_key": "handler"}