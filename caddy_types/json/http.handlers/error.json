{"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp.StaticError", "struct_fields": [{"key": "error", "value": {"type": "string", "doc": "The error message. Optional. Default is no error message."}, "doc": "The error message. Optional. Default is no error message."}, {"key": "status_code", "value": {"type": "string", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp.WeakString", "doc": "The recommended HTTP status code. Can be either an integer or a\nstring if placeholders are needed. Optional. Default is 500.\n\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned."}, "doc": "The recommended HTTP status code. Can be either an integer or a\nstring if placeholders are needed. Optional. Default is 500.\n\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned."}], "doc": "StaticError implements a simple handler that returns an error.\nThis handler returns an error value, but does not write a response.\nThis is useful when you want the server to act as if an error\noccurred; for example, to invoke your custom error handling logic.\n\nSince this handler does not write a response, the error information\nis for use by the server to know how to handle the error.\n", "module_inline_key": "handler"}