{"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth.HTTPBasicAuth", "struct_fields": [{"key": "hash", "value": {"type": "module", "doc": "The algorithm with which the passwords are hashed. Default: bcrypt", "module_namespace": "http.authentication.hashes", "module_inline_key": "algorithm"}, "doc": "The algorithm with which the passwords are hashed. Default: bcrypt"}, {"key": "accounts", "value": {"type": "array", "elems": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth.Account", "struct_fields": [{"key": "username", "value": {"type": "string", "doc": "A user's username."}, "doc": "A user's username."}, {"key": "password", "value": {"type": "string", "doc": "The user's hashed password, base64-encoded."}, "doc": "The user's hashed password, base64-encoded."}, {"key": "salt", "value": {"type": "string", "doc": "The user's password salt, base64-encoded; for\nalgorithms where external salt is needed."}, "doc": "The user's password salt, base64-encoded; for\nalgorithms where external salt is needed."}], "doc": "The list of accounts to authenticate.\n\n\nAccount contains a username, password, and salt (if applicable)."}}, "doc": "The list of accounts to authenticate.\n\n\nAccount contains a username, password, and salt (if applicable)."}, {"key": "realm", "value": {"type": "string", "doc": "The name of the realm. Default: restricted"}, "doc": "The name of the realm. Default: restricted"}, {"key": "hash_cache", "value": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth.Cache", "doc": "If non-nil, a mapping of plaintext passwords to their\nhashes will be cached in memory (with random eviction).\nThis can greatly improve the performance of traffic-heavy\nservers that use secure password hashing algorithms, with\nthe downside that plaintext passwords will be stored in\nmemory for a longer time (this should not be a problem\nas long as your machine is not compromised, at which point\nall bets are off, since basicauth necessitates plaintext\npasswords being received over the wire anyway). Note that\na cache hit does not mean it is a valid password.\n\n\nCache enables caching of basic auth results. This is especially\nhelpful for secure password hashes which can be expensive to\ncompute on every HTTP request."}, "doc": "If non-nil, a mapping of plaintext passwords to their\nhashes will be cached in memory (with random eviction).\nThis can greatly improve the performance of traffic-heavy\nservers that use secure password hashing algorithms, with\nthe downside that plaintext passwords will be stored in\nmemory for a longer time (this should not be a problem\nas long as your machine is not compromised, at which point\nall bets are off, since basicauth necessitates plaintext\npasswords being received over the wire anyway). Note that\na cache hit does not mean it is a valid password.\n\n\nCache enables caching of basic auth results. This is especially\nhelpful for secure password hashes which can be expensive to\ncompute on every HTTP request."}], "doc": "HTTPBasicAuth facilitates HTTP basic authentication.\n"}