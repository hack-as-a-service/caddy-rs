{"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy.HTTPTransport", "struct_fields": [{"key": "resolver", "value": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy.UpstreamResolver", "struct_fields": [{"key": "addresses", "value": {"type": "array", "elems": {"type": "string", "doc": "The addresses of DNS resolvers to use when looking up the addresses of proxy upstreams.\nIt accepts [network addresses](/docs/conventions#network-addresses)\nwith port range of only 1. If the host is an IP address, it will be dialed directly to resolve the upstream server.\nIf the host is not an IP address, the addresses are resolved using the [name resolution convention](https://golang.org/pkg/net/#hdr-Name_Resolution) of the Go standard library.\nIf the array contains more than 1 resolver address, one is chosen at random."}}, "doc": "The addresses of DNS resolvers to use when looking up the addresses of proxy upstreams.\nIt accepts [network addresses](/docs/conventions#network-addresses)\nwith port range of only 1. If the host is an IP address, it will be dialed directly to resolve the upstream server.\nIf the host is not an IP address, the addresses are resolved using the [name resolution convention](https://golang.org/pkg/net/#hdr-Name_Resolution) of the Go standard library.\nIf the array contains more than 1 resolver address, one is chosen at random."}], "doc": "Configures the DNS resolver used to resolve the IP address of upstream hostnames.\n\n\nUpstreamResolver holds the set of addresses of DNS resolvers of\nupstream addresses"}, "doc": "Configures the DNS resolver used to resolve the IP address of upstream hostnames.\n\n\nUpstreamResolver holds the set of addresses of DNS resolvers of\nupstream addresses"}, {"key": "tls", "value": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy.TLSConfig", "struct_fields": [{"key": "root_ca_pool", "value": {"type": "array", "elems": {"type": "string", "doc": "Optional list of base64-encoded DER-encoded CA certificates to trust."}}, "doc": "Optional list of base64-encoded DER-encoded CA certificates to trust."}, {"key": "root_ca_pem_files", "value": {"type": "array", "elems": {"type": "string", "doc": "List of PEM-encoded CA certificate files to add to the same trust\nstore as RootCAPool (or root_ca_pool in the JSON)."}}, "doc": "List of PEM-encoded CA certificate files to add to the same trust\nstore as RootCAPool (or root_ca_pool in the JSON)."}, {"key": "client_certificate_file", "value": {"type": "string", "doc": "PEM-encoded client certificate filename to present to servers."}, "doc": "PEM-encoded client certificate filename to present to servers."}, {"key": "client_certificate_key_file", "value": {"type": "string", "doc": "PEM-encoded key to use with the client certificate."}, "doc": "PEM-encoded key to use with the client certificate."}, {"key": "client_certificate_automate", "value": {"type": "string", "doc": "If specified, Caddy will use and automate a client certificate\nwith this subject name."}, "doc": "If specified, Caddy will use and automate a client certificate\nwith this subject name."}, {"key": "insecure_skip_verify", "value": {"type": "bool", "doc": "If true, TLS verification of server certificates will be disabled.\nThis is insecure and may be removed in the future. Do not use this\noption except in testing or local development environments."}, "doc": "If true, TLS verification of server certificates will be disabled.\nThis is insecure and may be removed in the future. Do not use this\noption except in testing or local development environments."}, {"key": "handshake_timeout", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "The duration to allow a TLS handshake to a server.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "The duration to allow a TLS handshake to a server.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, {"key": "server_name", "value": {"type": "string", "doc": "The server name (SNI) to use in TLS handshakes."}, "doc": "The server name (SNI) to use in TLS handshakes."}], "doc": "Configures TLS to the upstream. Setting this to an empty struct\nis sufficient to enable TLS with reasonable defaults.\n\n\nTLSConfig holds configuration related to the TLS configuration for the\ntransport/client."}, "doc": "Configures TLS to the upstream. Setting this to an empty struct\nis sufficient to enable TLS with reasonable defaults.\n\n\nTLSConfig holds configuration related to the TLS configuration for the\ntransport/client."}, {"key": "keep_alive", "value": {"type": "struct", "type_name": "github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy.KeepAlive", "struct_fields": [{"key": "enabled", "value": {"type": "bool", "doc": "Whether HTTP Keep-Alive is enabled. Default: true"}, "doc": "Whether HTTP Keep-Alive is enabled. Default: true"}, {"key": "probe_interval", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "How often to probe for liveness.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "How often to probe for liveness.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, {"key": "max_idle_conns", "value": {"type": "int", "doc": "Maximum number of idle connections. Default: 0, which means no limit."}, "doc": "Maximum number of idle connections. Default: 0, which means no limit."}, {"key": "max_idle_conns_per_host", "value": {"type": "int", "doc": "Maximum number of idle connections per host. Default: 32."}, "doc": "Maximum number of idle connections per host. Default: 32."}, {"key": "idle_timeout", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "How long connections should be kept alive when idle. Default: 0, which means no timeout.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "How long connections should be kept alive when idle. Default: 0, which means no timeout.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}], "doc": "Configures HTTP Keep-Alive (enabled by default). Should only be\nnecessary if rigorous testing has shown that tuning this helps\nimprove performance.\n\n\nKeepAlive holds configuration pertaining to HTTP Keep-Alive."}, "doc": "Configures HTTP Keep-Alive (enabled by default). Should only be\nnecessary if rigorous testing has shown that tuning this helps\nimprove performance.\n\n\nKeepAlive holds configuration pertaining to HTTP Keep-Alive."}, {"key": "compression", "value": {"type": "bool", "doc": "Whether to enable compression to upstream. Default: true"}, "doc": "Whether to enable compression to upstream. Default: true"}, {"key": "max_conns_per_host", "value": {"type": "int", "doc": "Maximum number of connections per host. Default: 0 (no limit)"}, "doc": "Maximum number of connections per host. Default: 0 (no limit)"}, {"key": "dial_timeout", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "How long to wait before timing out trying to connect to\nan upstream.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "How long to wait before timing out trying to connect to\nan upstream.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, {"key": "dial_fallback_delay", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "How long to wait before spawning an RFC 6555 Fast Fallback\nconnection. A negative value disables this.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "How long to wait before spawning an RFC 6555 Fast Fallback\nconnection. A negative value disables this.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, {"key": "response_header_timeout", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "How long to wait for reading response headers from server.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "How long to wait for reading response headers from server.\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, {"key": "expect_continue_timeout", "value": {"type": "int", "type_name": "github.com/caddyserver/caddy/v2.Duration", "doc": "The length of time to wait for a server's first response\nheaders after fully writing the request headers if the\nrequest has a header \"Expect: 100-continue\".\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, "doc": "The length of time to wait for a server's first response\nheaders after fully writing the request headers if the\nrequest has a header \"Expect: 100-continue\".\n\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`\u00b5s`, `ms`, `s`, `m`, `h`, and `d`."}, {"key": "max_response_header_size", "value": {"type": "int", "doc": "The maximum bytes to read from response headers."}, "doc": "The maximum bytes to read from response headers."}, {"key": "write_buffer_size", "value": {"type": "int", "doc": "The size of the write buffer in bytes."}, "doc": "The size of the write buffer in bytes."}, {"key": "read_buffer_size", "value": {"type": "int", "doc": "The size of the read buffer in bytes."}, "doc": "The size of the read buffer in bytes."}, {"key": "versions", "value": {"type": "array", "elems": {"type": "string", "doc": "The versions of HTTP to support. As a special case, \"h2c\"\ncan be specified to use H2C (HTTP/2 over Cleartext) to the\nupstream (this feature is experimental and subject to\nchange or removal). Default: [\"1.1\", \"2\"]"}}, "doc": "The versions of HTTP to support. As a special case, \"h2c\"\ncan be specified to use H2C (HTTP/2 over Cleartext) to the\nupstream (this feature is experimental and subject to\nchange or removal). Default: [\"1.1\", \"2\"]"}], "doc": "HTTPTransport is essentially a configuration wrapper for http.Transport.\nIt defines a JSON structure useful when configuring the HTTP transport\nfor Caddy's reverse proxy. It builds its http.Transport at Provision.\n", "module_inline_key": "protocol"}